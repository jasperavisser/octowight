<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>nl.haploid</groupId>
	<artifactId>spring-boot-parent</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.2.3.RELEASE</version>
	</parent>

	<properties>
		<java.version>1.8</java.version>
		<maven.compiler.source>${java.version}</maven.compiler.source>
		<maven.compiler.target>${java.version}</maven.compiler.target>
		<maven.compiler.testTarget>${java.version}</maven.compiler.testTarget>
		<maven.compiler.testSource>${java.version}</maven.compiler.testSource>
		<encoding>UTF-8</encoding>

		<!-- Plugins -->
		<spring-boot-maven.skip>false</spring-boot-maven.skip>
		<docker-maven.skip>true</docker-maven.skip>
		<docker.image.name>${project.artifactId}</docker.image.name>
		<docker.reuse.it>false</docker.reuse.it>

		<!-- Versions -->
		<docker-maven-plugin.version>0.0.21</docker-maven-plugin.version>
		<jmockit.version>1.16</jmockit.version>
		<kafka.version>0.8.2.1</kafka.version>
		<scala.version>2.10.0</scala.version>
		<yammer-metrics.version>2.2.0</yammer-metrics.version>
		<zkclient.version>0.3</zkclient.version>
	</properties>

	<dependencyManagement>
		<dependencies>

			<!-- Kafka consumer -->
			<dependency>
				<groupId>org.apache.kafka</groupId>
				<artifactId>kafka_2.10</artifactId>
				<version>${kafka.version}</version>
				<exclusions>
					<exclusion>
						<groupId>org.slf4j</groupId>
						<artifactId>slf4j-log4j12</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>org.scala-lang</groupId>
				<artifactId>scala-compiler</artifactId>
				<version>${scala.version}</version>
			</dependency>
			<dependency>
				<groupId>org.scala-lang</groupId>
				<artifactId>scala-library</artifactId>
				<version>${scala.version}</version>
			</dependency>
			<dependency>
				<groupId>com.101tec</groupId>
				<artifactId>zkclient</artifactId>
				<version>${zkclient.version}</version>
			</dependency>
			<dependency>
				<groupId>com.yammer.metrics</groupId>
				<artifactId>metrics-core</artifactId>
				<version>${yammer-metrics.version}</version>
			</dependency>

			<!-- Kafka producer -->
			<dependency>
				<groupId>org.apache.kafka</groupId>
				<artifactId>kafka-clients</artifactId>
				<version>${kafka.version}</version>
			</dependency>

			<!-- JMockit -->
			<dependency>
				<groupId>org.jmockit</groupId>
				<artifactId>jmockit</artifactId>
				<version>${jmockit.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.jmockit</groupId>
			<artifactId>jmockit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>

			<!-- Allow running project with 'mvn spring-boot:run' -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<skip>${spring-boot-maven.skip}</skip>
				</configuration>
			</plugin>

			<!-- Run unit tests during test phase -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>**/*IT.java</exclude>
					</excludes>
				</configuration>
			</plugin>

			<!-- Run ITs in verify phase -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<configuration>
					<includes>
						<include>**/*IT.java</include>
					</includes>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Put all dependencies in target/lib/ directory -->
			<plugin>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<includeScope>runtime</includeScope>
							<outputDirectory>${project.build.directory}/lib</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Build docker container -->
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>${docker-maven-plugin.version}</version>
				<configuration>
					<skipDockerBuild>${docker-maven.skip}</skipDockerBuild>
					<imageName>${docker.image.name}</imageName>
					<dockerDirectory>docker</dockerDirectory>
					<resources>
						<resource>
							<targetPath>/app</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.jar</include>
						</resource>
						<resource>
							<targetPath>/app</targetPath>
							<directory>${project.build.directory}/lib</directory>
							<include>*.jar</include>
						</resource>
					</resources>
				</configuration>
			</plugin>

			<!-- Start containers with dependencies during IT -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>start-it-containers</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<workingDirectory>${project.basedir}/src/test/script/</workingDirectory>
							<executable>bash</executable>
							<arguments>
								<argument>start-it-containers.sh</argument>
								<argument>${docker.reuse.it}</argument>
							</arguments>
						</configuration>
					</execution>
					<execution>
						<id>stop-it-containers</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<workingDirectory>${project.basedir}/src/test/script/</workingDirectory>
							<executable>bash</executable>
							<arguments>
								<argument>stop-it-containers.sh</argument>
								<argument>${docker.reuse.it}</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<!-- Put the IDE's build output in a folder other than target, so that
			IDE builds don't interact with Maven builds. -->
		<!-- See also: http://stackoverflow.com/questions/10208313/eclipse-auto-build-output-interacts-with-maven-command-line-build-output -->
		<profile>
			<id>IDE</id>
			<activation>
				<property>
					<name>m2e.version</name>
				</property>
			</activation>
			<build>
				<directory>target-ide</directory>
			</build>
		</profile>
	</profiles>
</project>
